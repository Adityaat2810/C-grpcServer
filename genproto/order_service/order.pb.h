// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: order_service/order.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_order_5fservice_2forder_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_order_5fservice_2forder_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_order_5fservice_2forder_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_order_5fservice_2forder_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_order_5fservice_2forder_2eproto;
namespace order_service {
namespace v1 {
class CreateRequest;
struct CreateRequestDefaultTypeInternal;
extern CreateRequestDefaultTypeInternal _CreateRequest_default_instance_;
class CreateResponse;
struct CreateResponseDefaultTypeInternal;
extern CreateResponseDefaultTypeInternal _CreateResponse_default_instance_;
class GetRequest;
struct GetRequestDefaultTypeInternal;
extern GetRequestDefaultTypeInternal _GetRequest_default_instance_;
class GetResponse;
struct GetResponseDefaultTypeInternal;
extern GetResponseDefaultTypeInternal _GetResponse_default_instance_;
class Item;
struct ItemDefaultTypeInternal;
extern ItemDefaultTypeInternal _Item_default_instance_;
class ListRequest;
struct ListRequestDefaultTypeInternal;
extern ListRequestDefaultTypeInternal _ListRequest_default_instance_;
class ListRequest_FilterEntry_DoNotUse;
struct ListRequest_FilterEntry_DoNotUseDefaultTypeInternal;
extern ListRequest_FilterEntry_DoNotUseDefaultTypeInternal _ListRequest_FilterEntry_DoNotUse_default_instance_;
class ListResponse;
struct ListResponseDefaultTypeInternal;
extern ListResponseDefaultTypeInternal _ListResponse_default_instance_;
class Order;
struct OrderDefaultTypeInternal;
extern OrderDefaultTypeInternal _Order_default_instance_;
class StreamOrderUpdateRequest;
struct StreamOrderUpdateRequestDefaultTypeInternal;
extern StreamOrderUpdateRequestDefaultTypeInternal _StreamOrderUpdateRequest_default_instance_;
class StreamOrderUpdateResponse;
struct StreamOrderUpdateResponseDefaultTypeInternal;
extern StreamOrderUpdateResponseDefaultTypeInternal _StreamOrderUpdateResponse_default_instance_;
class UpdateRequest;
struct UpdateRequestDefaultTypeInternal;
extern UpdateRequestDefaultTypeInternal _UpdateRequest_default_instance_;
class UpdateResponse;
struct UpdateResponseDefaultTypeInternal;
extern UpdateResponseDefaultTypeInternal _UpdateResponse_default_instance_;
}  // namespace v1
}  // namespace order_service
PROTOBUF_NAMESPACE_OPEN
template<> ::order_service::v1::CreateRequest* Arena::CreateMaybeMessage<::order_service::v1::CreateRequest>(Arena*);
template<> ::order_service::v1::CreateResponse* Arena::CreateMaybeMessage<::order_service::v1::CreateResponse>(Arena*);
template<> ::order_service::v1::GetRequest* Arena::CreateMaybeMessage<::order_service::v1::GetRequest>(Arena*);
template<> ::order_service::v1::GetResponse* Arena::CreateMaybeMessage<::order_service::v1::GetResponse>(Arena*);
template<> ::order_service::v1::Item* Arena::CreateMaybeMessage<::order_service::v1::Item>(Arena*);
template<> ::order_service::v1::ListRequest* Arena::CreateMaybeMessage<::order_service::v1::ListRequest>(Arena*);
template<> ::order_service::v1::ListRequest_FilterEntry_DoNotUse* Arena::CreateMaybeMessage<::order_service::v1::ListRequest_FilterEntry_DoNotUse>(Arena*);
template<> ::order_service::v1::ListResponse* Arena::CreateMaybeMessage<::order_service::v1::ListResponse>(Arena*);
template<> ::order_service::v1::Order* Arena::CreateMaybeMessage<::order_service::v1::Order>(Arena*);
template<> ::order_service::v1::StreamOrderUpdateRequest* Arena::CreateMaybeMessage<::order_service::v1::StreamOrderUpdateRequest>(Arena*);
template<> ::order_service::v1::StreamOrderUpdateResponse* Arena::CreateMaybeMessage<::order_service::v1::StreamOrderUpdateResponse>(Arena*);
template<> ::order_service::v1::UpdateRequest* Arena::CreateMaybeMessage<::order_service::v1::UpdateRequest>(Arena*);
template<> ::order_service::v1::UpdateResponse* Arena::CreateMaybeMessage<::order_service::v1::UpdateResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace order_service {
namespace v1 {

enum Status : int {
  PENDING = 0,
  PROCESSING = 1,
  SHIPPED = 2,
  DELIVERED = 3,
  CANCELLED = 4,
  Status_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  Status_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool Status_IsValid(int value);
constexpr Status Status_MIN = PENDING;
constexpr Status Status_MAX = CANCELLED;
constexpr int Status_ARRAYSIZE = Status_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Status_descriptor();
template<typename T>
inline const std::string& Status_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Status>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Status_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Status_descriptor(), enum_t_value);
}
inline bool Status_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, Status* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Status>(
    Status_descriptor(), name, value);
}
enum UpdateType : int {
  CREATED = 0,
  UPDATED = 1,
  STATUS_CHANGED = 2,
  UpdateType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  UpdateType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool UpdateType_IsValid(int value);
constexpr UpdateType UpdateType_MIN = CREATED;
constexpr UpdateType UpdateType_MAX = STATUS_CHANGED;
constexpr int UpdateType_ARRAYSIZE = UpdateType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* UpdateType_descriptor();
template<typename T>
inline const std::string& UpdateType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, UpdateType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function UpdateType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    UpdateType_descriptor(), enum_t_value);
}
inline bool UpdateType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, UpdateType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<UpdateType>(
    UpdateType_descriptor(), name, value);
}
// ===================================================================

class Item final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:order_service.v1.Item) */ {
 public:
  inline Item() : Item(nullptr) {}
  ~Item() override;
  explicit PROTOBUF_CONSTEXPR Item(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Item(const Item& from);
  Item(Item&& from) noexcept
    : Item() {
    *this = ::std::move(from);
  }

  inline Item& operator=(const Item& from) {
    CopyFrom(from);
    return *this;
  }
  inline Item& operator=(Item&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Item& default_instance() {
    return *internal_default_instance();
  }
  static inline const Item* internal_default_instance() {
    return reinterpret_cast<const Item*>(
               &_Item_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Item& a, Item& b) {
    a.Swap(&b);
  }
  inline void Swap(Item* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Item* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Item* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Item>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Item& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Item& from) {
    Item::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Item* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "order_service.v1.Item";
  }
  protected:
  explicit Item(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kNameFieldNumber = 2,
    kPriceFieldNumber = 4,
    kQuantityFieldNumber = 3,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string name = 2;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // double price = 4;
  void clear_price();
  double price() const;
  void set_price(double value);
  private:
  double _internal_price() const;
  void _internal_set_price(double value);
  public:

  // int32 quantity = 3;
  void clear_quantity();
  int32_t quantity() const;
  void set_quantity(int32_t value);
  private:
  int32_t _internal_quantity() const;
  void _internal_set_quantity(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:order_service.v1.Item)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
    double price_;
    int32_t quantity_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_order_5fservice_2forder_2eproto;
};
// -------------------------------------------------------------------

class Order final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:order_service.v1.Order) */ {
 public:
  inline Order() : Order(nullptr) {}
  ~Order() override;
  explicit PROTOBUF_CONSTEXPR Order(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Order(const Order& from);
  Order(Order&& from) noexcept
    : Order() {
    *this = ::std::move(from);
  }

  inline Order& operator=(const Order& from) {
    CopyFrom(from);
    return *this;
  }
  inline Order& operator=(Order&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Order& default_instance() {
    return *internal_default_instance();
  }
  static inline const Order* internal_default_instance() {
    return reinterpret_cast<const Order*>(
               &_Order_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Order& a, Order& b) {
    a.Swap(&b);
  }
  inline void Swap(Order* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Order* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Order* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Order>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Order& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const Order& from) {
    Order::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Order* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "order_service.v1.Order";
  }
  protected:
  explicit Order(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemsFieldNumber = 2,
    kIdFieldNumber = 1,
    kAddressFieldNumber = 5,
    kTotalPriceFieldNumber = 4,
    kCreatedAtFieldNumber = 6,
    kUpdatedAtFieldNumber = 7,
    kStatusFieldNumber = 3,
  };
  // repeated .order_service.v1.Item items = 2;
  int items_size() const;
  private:
  int _internal_items_size() const;
  public:
  void clear_items();
  ::order_service::v1::Item* mutable_items(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::order_service::v1::Item >*
      mutable_items();
  private:
  const ::order_service::v1::Item& _internal_items(int index) const;
  ::order_service::v1::Item* _internal_add_items();
  public:
  const ::order_service::v1::Item& items(int index) const;
  ::order_service::v1::Item* add_items();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::order_service::v1::Item >&
      items() const;

  // string id = 1;
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_NODISCARD std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string address = 5;
  void clear_address();
  const std::string& address() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_address(ArgT0&& arg0, ArgT... args);
  std::string* mutable_address();
  PROTOBUF_NODISCARD std::string* release_address();
  void set_allocated_address(std::string* address);
  private:
  const std::string& _internal_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_address(const std::string& value);
  std::string* _internal_mutable_address();
  public:

  // double total_price = 4;
  void clear_total_price();
  double total_price() const;
  void set_total_price(double value);
  private:
  double _internal_total_price() const;
  void _internal_set_total_price(double value);
  public:

  // int64 created_at = 6;
  void clear_created_at();
  int64_t created_at() const;
  void set_created_at(int64_t value);
  private:
  int64_t _internal_created_at() const;
  void _internal_set_created_at(int64_t value);
  public:

  // int64 updated_at = 7;
  void clear_updated_at();
  int64_t updated_at() const;
  void set_updated_at(int64_t value);
  private:
  int64_t _internal_updated_at() const;
  void _internal_set_updated_at(int64_t value);
  public:

  // .order_service.v1.Status status = 3;
  void clear_status();
  ::order_service::v1::Status status() const;
  void set_status(::order_service::v1::Status value);
  private:
  ::order_service::v1::Status _internal_status() const;
  void _internal_set_status(::order_service::v1::Status value);
  public:

  // @@protoc_insertion_point(class_scope:order_service.v1.Order)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::order_service::v1::Item > items_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_;
    double total_price_;
    int64_t created_at_;
    int64_t updated_at_;
    int status_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_order_5fservice_2forder_2eproto;
};
// -------------------------------------------------------------------

class GetRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:order_service.v1.GetRequest) */ {
 public:
  inline GetRequest() : GetRequest(nullptr) {}
  ~GetRequest() override;
  explicit PROTOBUF_CONSTEXPR GetRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetRequest(const GetRequest& from);
  GetRequest(GetRequest&& from) noexcept
    : GetRequest() {
    *this = ::std::move(from);
  }

  inline GetRequest& operator=(const GetRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetRequest& operator=(GetRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetRequest* internal_default_instance() {
    return reinterpret_cast<const GetRequest*>(
               &_GetRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(GetRequest& a, GetRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetRequest& from) {
    GetRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "order_service.v1.GetRequest";
  }
  protected:
  explicit GetRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOrderIdFieldNumber = 1,
  };
  // string order_id = 1;
  void clear_order_id();
  const std::string& order_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_order_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_order_id();
  PROTOBUF_NODISCARD std::string* release_order_id();
  void set_allocated_order_id(std::string* order_id);
  private:
  const std::string& _internal_order_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_order_id(const std::string& value);
  std::string* _internal_mutable_order_id();
  public:

  // @@protoc_insertion_point(class_scope:order_service.v1.GetRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr order_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_order_5fservice_2forder_2eproto;
};
// -------------------------------------------------------------------

class GetResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:order_service.v1.GetResponse) */ {
 public:
  inline GetResponse() : GetResponse(nullptr) {}
  ~GetResponse() override;
  explicit PROTOBUF_CONSTEXPR GetResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GetResponse(const GetResponse& from);
  GetResponse(GetResponse&& from) noexcept
    : GetResponse() {
    *this = ::std::move(from);
  }

  inline GetResponse& operator=(const GetResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetResponse& operator=(GetResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetResponse* internal_default_instance() {
    return reinterpret_cast<const GetResponse*>(
               &_GetResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(GetResponse& a, GetResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(GetResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<GetResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const GetResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const GetResponse& from) {
    GetResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "order_service.v1.GetResponse";
  }
  protected:
  explicit GetResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOrderFieldNumber = 1,
  };
  // .order_service.v1.Order order = 1;
  bool has_order() const;
  private:
  bool _internal_has_order() const;
  public:
  void clear_order();
  const ::order_service::v1::Order& order() const;
  PROTOBUF_NODISCARD ::order_service::v1::Order* release_order();
  ::order_service::v1::Order* mutable_order();
  void set_allocated_order(::order_service::v1::Order* order);
  private:
  const ::order_service::v1::Order& _internal_order() const;
  ::order_service::v1::Order* _internal_mutable_order();
  public:
  void unsafe_arena_set_allocated_order(
      ::order_service::v1::Order* order);
  ::order_service::v1::Order* unsafe_arena_release_order();

  // @@protoc_insertion_point(class_scope:order_service.v1.GetResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::order_service::v1::Order* order_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_order_5fservice_2forder_2eproto;
};
// -------------------------------------------------------------------

class ListRequest_FilterEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<ListRequest_FilterEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<ListRequest_FilterEntry_DoNotUse, 
    std::string, std::string,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> SuperType;
  ListRequest_FilterEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR ListRequest_FilterEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit ListRequest_FilterEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const ListRequest_FilterEntry_DoNotUse& other);
  static const ListRequest_FilterEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const ListRequest_FilterEntry_DoNotUse*>(&_ListRequest_FilterEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "order_service.v1.ListRequest.FilterEntry.key");
 }
  static bool ValidateValue(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "order_service.v1.ListRequest.FilterEntry.value");
 }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_order_5fservice_2forder_2eproto;
};

// -------------------------------------------------------------------

class ListRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:order_service.v1.ListRequest) */ {
 public:
  inline ListRequest() : ListRequest(nullptr) {}
  ~ListRequest() override;
  explicit PROTOBUF_CONSTEXPR ListRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListRequest(const ListRequest& from);
  ListRequest(ListRequest&& from) noexcept
    : ListRequest() {
    *this = ::std::move(from);
  }

  inline ListRequest& operator=(const ListRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListRequest& operator=(ListRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListRequest* internal_default_instance() {
    return reinterpret_cast<const ListRequest*>(
               &_ListRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ListRequest& a, ListRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(ListRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ListRequest& from) {
    ListRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "order_service.v1.ListRequest";
  }
  protected:
  explicit ListRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kFilterFieldNumber = 4,
    kUserIdFieldNumber = 1,
    kLimitFieldNumber = 2,
    kPageFieldNumber = 3,
  };
  // map<string, string> filter = 4;
  int filter_size() const;
  private:
  int _internal_filter_size() const;
  public:
  void clear_filter();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      _internal_filter() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      _internal_mutable_filter();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
      filter() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
      mutable_filter();

  // string user_id = 1;
  void clear_user_id();
  const std::string& user_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_user_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_user_id();
  PROTOBUF_NODISCARD std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // int32 limit = 2;
  void clear_limit();
  int32_t limit() const;
  void set_limit(int32_t value);
  private:
  int32_t _internal_limit() const;
  void _internal_set_limit(int32_t value);
  public:

  // int32 page = 3;
  void clear_page();
  int32_t page() const;
  void set_page(int32_t value);
  private:
  int32_t _internal_page() const;
  void _internal_set_page(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:order_service.v1.ListRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        ListRequest_FilterEntry_DoNotUse,
        std::string, std::string,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING> filter_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
    int32_t limit_;
    int32_t page_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_order_5fservice_2forder_2eproto;
};
// -------------------------------------------------------------------

class ListResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:order_service.v1.ListResponse) */ {
 public:
  inline ListResponse() : ListResponse(nullptr) {}
  ~ListResponse() override;
  explicit PROTOBUF_CONSTEXPR ListResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ListResponse(const ListResponse& from);
  ListResponse(ListResponse&& from) noexcept
    : ListResponse() {
    *this = ::std::move(from);
  }

  inline ListResponse& operator=(const ListResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ListResponse& operator=(ListResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ListResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const ListResponse* internal_default_instance() {
    return reinterpret_cast<const ListResponse*>(
               &_ListResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(ListResponse& a, ListResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ListResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ListResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ListResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ListResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ListResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const ListResponse& from) {
    ListResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "order_service.v1.ListResponse";
  }
  protected:
  explicit ListResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOrdersFieldNumber = 1,
    kTotalFieldNumber = 2,
  };
  // repeated .order_service.v1.Order orders = 1;
  int orders_size() const;
  private:
  int _internal_orders_size() const;
  public:
  void clear_orders();
  ::order_service::v1::Order* mutable_orders(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::order_service::v1::Order >*
      mutable_orders();
  private:
  const ::order_service::v1::Order& _internal_orders(int index) const;
  ::order_service::v1::Order* _internal_add_orders();
  public:
  const ::order_service::v1::Order& orders(int index) const;
  ::order_service::v1::Order* add_orders();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::order_service::v1::Order >&
      orders() const;

  // int32 total = 2;
  void clear_total();
  int32_t total() const;
  void set_total(int32_t value);
  private:
  int32_t _internal_total() const;
  void _internal_set_total(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:order_service.v1.ListResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::order_service::v1::Order > orders_;
    int32_t total_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_order_5fservice_2forder_2eproto;
};
// -------------------------------------------------------------------

class CreateRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:order_service.v1.CreateRequest) */ {
 public:
  inline CreateRequest() : CreateRequest(nullptr) {}
  ~CreateRequest() override;
  explicit PROTOBUF_CONSTEXPR CreateRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateRequest(const CreateRequest& from);
  CreateRequest(CreateRequest&& from) noexcept
    : CreateRequest() {
    *this = ::std::move(from);
  }

  inline CreateRequest& operator=(const CreateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateRequest& operator=(CreateRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateRequest* internal_default_instance() {
    return reinterpret_cast<const CreateRequest*>(
               &_CreateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(CreateRequest& a, CreateRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CreateRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CreateRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CreateRequest& from) {
    CreateRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "order_service.v1.CreateRequest";
  }
  protected:
  explicit CreateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemsFieldNumber = 3,
    kUserIdFieldNumber = 1,
    kAddressFieldNumber = 2,
  };
  // repeated .order_service.v1.Item items = 3;
  int items_size() const;
  private:
  int _internal_items_size() const;
  public:
  void clear_items();
  ::order_service::v1::Item* mutable_items(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::order_service::v1::Item >*
      mutable_items();
  private:
  const ::order_service::v1::Item& _internal_items(int index) const;
  ::order_service::v1::Item* _internal_add_items();
  public:
  const ::order_service::v1::Item& items(int index) const;
  ::order_service::v1::Item* add_items();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::order_service::v1::Item >&
      items() const;

  // string user_id = 1;
  void clear_user_id();
  const std::string& user_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_user_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_user_id();
  PROTOBUF_NODISCARD std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // string address = 2;
  void clear_address();
  const std::string& address() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_address(ArgT0&& arg0, ArgT... args);
  std::string* mutable_address();
  PROTOBUF_NODISCARD std::string* release_address();
  void set_allocated_address(std::string* address);
  private:
  const std::string& _internal_address() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_address(const std::string& value);
  std::string* _internal_mutable_address();
  public:

  // @@protoc_insertion_point(class_scope:order_service.v1.CreateRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::order_service::v1::Item > items_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr address_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_order_5fservice_2forder_2eproto;
};
// -------------------------------------------------------------------

class CreateResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:order_service.v1.CreateResponse) */ {
 public:
  inline CreateResponse() : CreateResponse(nullptr) {}
  ~CreateResponse() override;
  explicit PROTOBUF_CONSTEXPR CreateResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CreateResponse(const CreateResponse& from);
  CreateResponse(CreateResponse&& from) noexcept
    : CreateResponse() {
    *this = ::std::move(from);
  }

  inline CreateResponse& operator=(const CreateResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline CreateResponse& operator=(CreateResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CreateResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const CreateResponse* internal_default_instance() {
    return reinterpret_cast<const CreateResponse*>(
               &_CreateResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(CreateResponse& a, CreateResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(CreateResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CreateResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CreateResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CreateResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CreateResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CreateResponse& from) {
    CreateResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "order_service.v1.CreateResponse";
  }
  protected:
  explicit CreateResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 1,
    kOrderFieldNumber = 2,
  };
  // string user_id = 1;
  void clear_user_id();
  const std::string& user_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_user_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_user_id();
  PROTOBUF_NODISCARD std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // .order_service.v1.Order order = 2;
  bool has_order() const;
  private:
  bool _internal_has_order() const;
  public:
  void clear_order();
  const ::order_service::v1::Order& order() const;
  PROTOBUF_NODISCARD ::order_service::v1::Order* release_order();
  ::order_service::v1::Order* mutable_order();
  void set_allocated_order(::order_service::v1::Order* order);
  private:
  const ::order_service::v1::Order& _internal_order() const;
  ::order_service::v1::Order* _internal_mutable_order();
  public:
  void unsafe_arena_set_allocated_order(
      ::order_service::v1::Order* order);
  ::order_service::v1::Order* unsafe_arena_release_order();

  // @@protoc_insertion_point(class_scope:order_service.v1.CreateResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
    ::order_service::v1::Order* order_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_order_5fservice_2forder_2eproto;
};
// -------------------------------------------------------------------

class UpdateRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:order_service.v1.UpdateRequest) */ {
 public:
  inline UpdateRequest() : UpdateRequest(nullptr) {}
  ~UpdateRequest() override;
  explicit PROTOBUF_CONSTEXPR UpdateRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdateRequest(const UpdateRequest& from);
  UpdateRequest(UpdateRequest&& from) noexcept
    : UpdateRequest() {
    *this = ::std::move(from);
  }

  inline UpdateRequest& operator=(const UpdateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateRequest& operator=(UpdateRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdateRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateRequest*>(
               &_UpdateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(UpdateRequest& a, UpdateRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UpdateRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UpdateRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UpdateRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UpdateRequest& from) {
    UpdateRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "order_service.v1.UpdateRequest";
  }
  protected:
  explicit UpdateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOrderFieldNumber = 2,
  };
  // .order_service.v1.Order order = 2;
  bool has_order() const;
  private:
  bool _internal_has_order() const;
  public:
  void clear_order();
  const ::order_service::v1::Order& order() const;
  PROTOBUF_NODISCARD ::order_service::v1::Order* release_order();
  ::order_service::v1::Order* mutable_order();
  void set_allocated_order(::order_service::v1::Order* order);
  private:
  const ::order_service::v1::Order& _internal_order() const;
  ::order_service::v1::Order* _internal_mutable_order();
  public:
  void unsafe_arena_set_allocated_order(
      ::order_service::v1::Order* order);
  ::order_service::v1::Order* unsafe_arena_release_order();

  // @@protoc_insertion_point(class_scope:order_service.v1.UpdateRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::order_service::v1::Order* order_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_order_5fservice_2forder_2eproto;
};
// -------------------------------------------------------------------

class UpdateResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:order_service.v1.UpdateResponse) */ {
 public:
  inline UpdateResponse() : UpdateResponse(nullptr) {}
  ~UpdateResponse() override;
  explicit PROTOBUF_CONSTEXPR UpdateResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdateResponse(const UpdateResponse& from);
  UpdateResponse(UpdateResponse&& from) noexcept
    : UpdateResponse() {
    *this = ::std::move(from);
  }

  inline UpdateResponse& operator=(const UpdateResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdateResponse& operator=(UpdateResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdateResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdateResponse* internal_default_instance() {
    return reinterpret_cast<const UpdateResponse*>(
               &_UpdateResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(UpdateResponse& a, UpdateResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdateResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdateResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  UpdateResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<UpdateResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const UpdateResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const UpdateResponse& from) {
    UpdateResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "order_service.v1.UpdateResponse";
  }
  protected:
  explicit UpdateResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOrderFieldNumber = 2,
  };
  // .order_service.v1.Order order = 2;
  bool has_order() const;
  private:
  bool _internal_has_order() const;
  public:
  void clear_order();
  const ::order_service::v1::Order& order() const;
  PROTOBUF_NODISCARD ::order_service::v1::Order* release_order();
  ::order_service::v1::Order* mutable_order();
  void set_allocated_order(::order_service::v1::Order* order);
  private:
  const ::order_service::v1::Order& _internal_order() const;
  ::order_service::v1::Order* _internal_mutable_order();
  public:
  void unsafe_arena_set_allocated_order(
      ::order_service::v1::Order* order);
  ::order_service::v1::Order* unsafe_arena_release_order();

  // @@protoc_insertion_point(class_scope:order_service.v1.UpdateResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::order_service::v1::Order* order_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_order_5fservice_2forder_2eproto;
};
// -------------------------------------------------------------------

class StreamOrderUpdateRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:order_service.v1.StreamOrderUpdateRequest) */ {
 public:
  inline StreamOrderUpdateRequest() : StreamOrderUpdateRequest(nullptr) {}
  ~StreamOrderUpdateRequest() override;
  explicit PROTOBUF_CONSTEXPR StreamOrderUpdateRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StreamOrderUpdateRequest(const StreamOrderUpdateRequest& from);
  StreamOrderUpdateRequest(StreamOrderUpdateRequest&& from) noexcept
    : StreamOrderUpdateRequest() {
    *this = ::std::move(from);
  }

  inline StreamOrderUpdateRequest& operator=(const StreamOrderUpdateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline StreamOrderUpdateRequest& operator=(StreamOrderUpdateRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StreamOrderUpdateRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const StreamOrderUpdateRequest* internal_default_instance() {
    return reinterpret_cast<const StreamOrderUpdateRequest*>(
               &_StreamOrderUpdateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(StreamOrderUpdateRequest& a, StreamOrderUpdateRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(StreamOrderUpdateRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StreamOrderUpdateRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StreamOrderUpdateRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StreamOrderUpdateRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StreamOrderUpdateRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const StreamOrderUpdateRequest& from) {
    StreamOrderUpdateRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StreamOrderUpdateRequest* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "order_service.v1.StreamOrderUpdateRequest";
  }
  protected:
  explicit StreamOrderUpdateRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserIdFieldNumber = 1,
    kOrderIdFieldNumber = 2,
  };
  // string user_id = 1;
  void clear_user_id();
  const std::string& user_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_user_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_user_id();
  PROTOBUF_NODISCARD std::string* release_user_id();
  void set_allocated_user_id(std::string* user_id);
  private:
  const std::string& _internal_user_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_id(const std::string& value);
  std::string* _internal_mutable_user_id();
  public:

  // string order_id = 2;
  void clear_order_id();
  const std::string& order_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_order_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_order_id();
  PROTOBUF_NODISCARD std::string* release_order_id();
  void set_allocated_order_id(std::string* order_id);
  private:
  const std::string& _internal_order_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_order_id(const std::string& value);
  std::string* _internal_mutable_order_id();
  public:

  // @@protoc_insertion_point(class_scope:order_service.v1.StreamOrderUpdateRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_id_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr order_id_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_order_5fservice_2forder_2eproto;
};
// -------------------------------------------------------------------

class StreamOrderUpdateResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:order_service.v1.StreamOrderUpdateResponse) */ {
 public:
  inline StreamOrderUpdateResponse() : StreamOrderUpdateResponse(nullptr) {}
  ~StreamOrderUpdateResponse() override;
  explicit PROTOBUF_CONSTEXPR StreamOrderUpdateResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StreamOrderUpdateResponse(const StreamOrderUpdateResponse& from);
  StreamOrderUpdateResponse(StreamOrderUpdateResponse&& from) noexcept
    : StreamOrderUpdateResponse() {
    *this = ::std::move(from);
  }

  inline StreamOrderUpdateResponse& operator=(const StreamOrderUpdateResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline StreamOrderUpdateResponse& operator=(StreamOrderUpdateResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StreamOrderUpdateResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const StreamOrderUpdateResponse* internal_default_instance() {
    return reinterpret_cast<const StreamOrderUpdateResponse*>(
               &_StreamOrderUpdateResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(StreamOrderUpdateResponse& a, StreamOrderUpdateResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(StreamOrderUpdateResponse* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StreamOrderUpdateResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  StreamOrderUpdateResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<StreamOrderUpdateResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const StreamOrderUpdateResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const StreamOrderUpdateResponse& from) {
    StreamOrderUpdateResponse::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StreamOrderUpdateResponse* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "order_service.v1.StreamOrderUpdateResponse";
  }
  protected:
  explicit StreamOrderUpdateResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOrderFieldNumber = 1,
    kUpdatedAtFieldNumber = 3,
    kTypeFieldNumber = 2,
  };
  // .order_service.v1.Order order = 1;
  bool has_order() const;
  private:
  bool _internal_has_order() const;
  public:
  void clear_order();
  const ::order_service::v1::Order& order() const;
  PROTOBUF_NODISCARD ::order_service::v1::Order* release_order();
  ::order_service::v1::Order* mutable_order();
  void set_allocated_order(::order_service::v1::Order* order);
  private:
  const ::order_service::v1::Order& _internal_order() const;
  ::order_service::v1::Order* _internal_mutable_order();
  public:
  void unsafe_arena_set_allocated_order(
      ::order_service::v1::Order* order);
  ::order_service::v1::Order* unsafe_arena_release_order();

  // int64 updated_at = 3;
  void clear_updated_at();
  int64_t updated_at() const;
  void set_updated_at(int64_t value);
  private:
  int64_t _internal_updated_at() const;
  void _internal_set_updated_at(int64_t value);
  public:

  // .order_service.v1.UpdateType type = 2;
  void clear_type();
  ::order_service::v1::UpdateType type() const;
  void set_type(::order_service::v1::UpdateType value);
  private:
  ::order_service::v1::UpdateType _internal_type() const;
  void _internal_set_type(::order_service::v1::UpdateType value);
  public:

  // @@protoc_insertion_point(class_scope:order_service.v1.StreamOrderUpdateResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::order_service::v1::Order* order_;
    int64_t updated_at_;
    int type_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_order_5fservice_2forder_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Item

// string id = 1;
inline void Item::clear_id() {
  _impl_.id_.ClearToEmpty();
}
inline const std::string& Item::id() const {
  // @@protoc_insertion_point(field_get:order_service.v1.Item.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Item::set_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:order_service.v1.Item.id)
}
inline std::string* Item::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:order_service.v1.Item.id)
  return _s;
}
inline const std::string& Item::_internal_id() const {
  return _impl_.id_.Get();
}
inline void Item::_internal_set_id(const std::string& value) {
  
  _impl_.id_.Set(value, GetArenaForAllocation());
}
inline std::string* Item::_internal_mutable_id() {
  
  return _impl_.id_.Mutable(GetArenaForAllocation());
}
inline std::string* Item::release_id() {
  // @@protoc_insertion_point(field_release:order_service.v1.Item.id)
  return _impl_.id_.Release();
}
inline void Item::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  _impl_.id_.SetAllocated(id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.id_.IsDefault()) {
    _impl_.id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:order_service.v1.Item.id)
}

// string name = 2;
inline void Item::clear_name() {
  _impl_.name_.ClearToEmpty();
}
inline const std::string& Item::name() const {
  // @@protoc_insertion_point(field_get:order_service.v1.Item.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Item::set_name(ArgT0&& arg0, ArgT... args) {
 
 _impl_.name_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:order_service.v1.Item.name)
}
inline std::string* Item::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:order_service.v1.Item.name)
  return _s;
}
inline const std::string& Item::_internal_name() const {
  return _impl_.name_.Get();
}
inline void Item::_internal_set_name(const std::string& value) {
  
  _impl_.name_.Set(value, GetArenaForAllocation());
}
inline std::string* Item::_internal_mutable_name() {
  
  return _impl_.name_.Mutable(GetArenaForAllocation());
}
inline std::string* Item::release_name() {
  // @@protoc_insertion_point(field_release:order_service.v1.Item.name)
  return _impl_.name_.Release();
}
inline void Item::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  _impl_.name_.SetAllocated(name, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:order_service.v1.Item.name)
}

// int32 quantity = 3;
inline void Item::clear_quantity() {
  _impl_.quantity_ = 0;
}
inline int32_t Item::_internal_quantity() const {
  return _impl_.quantity_;
}
inline int32_t Item::quantity() const {
  // @@protoc_insertion_point(field_get:order_service.v1.Item.quantity)
  return _internal_quantity();
}
inline void Item::_internal_set_quantity(int32_t value) {
  
  _impl_.quantity_ = value;
}
inline void Item::set_quantity(int32_t value) {
  _internal_set_quantity(value);
  // @@protoc_insertion_point(field_set:order_service.v1.Item.quantity)
}

// double price = 4;
inline void Item::clear_price() {
  _impl_.price_ = 0;
}
inline double Item::_internal_price() const {
  return _impl_.price_;
}
inline double Item::price() const {
  // @@protoc_insertion_point(field_get:order_service.v1.Item.price)
  return _internal_price();
}
inline void Item::_internal_set_price(double value) {
  
  _impl_.price_ = value;
}
inline void Item::set_price(double value) {
  _internal_set_price(value);
  // @@protoc_insertion_point(field_set:order_service.v1.Item.price)
}

// -------------------------------------------------------------------

// Order

// string id = 1;
inline void Order::clear_id() {
  _impl_.id_.ClearToEmpty();
}
inline const std::string& Order::id() const {
  // @@protoc_insertion_point(field_get:order_service.v1.Order.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Order::set_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:order_service.v1.Order.id)
}
inline std::string* Order::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:order_service.v1.Order.id)
  return _s;
}
inline const std::string& Order::_internal_id() const {
  return _impl_.id_.Get();
}
inline void Order::_internal_set_id(const std::string& value) {
  
  _impl_.id_.Set(value, GetArenaForAllocation());
}
inline std::string* Order::_internal_mutable_id() {
  
  return _impl_.id_.Mutable(GetArenaForAllocation());
}
inline std::string* Order::release_id() {
  // @@protoc_insertion_point(field_release:order_service.v1.Order.id)
  return _impl_.id_.Release();
}
inline void Order::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  _impl_.id_.SetAllocated(id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.id_.IsDefault()) {
    _impl_.id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:order_service.v1.Order.id)
}

// repeated .order_service.v1.Item items = 2;
inline int Order::_internal_items_size() const {
  return _impl_.items_.size();
}
inline int Order::items_size() const {
  return _internal_items_size();
}
inline void Order::clear_items() {
  _impl_.items_.Clear();
}
inline ::order_service::v1::Item* Order::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:order_service.v1.Order.items)
  return _impl_.items_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::order_service::v1::Item >*
Order::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:order_service.v1.Order.items)
  return &_impl_.items_;
}
inline const ::order_service::v1::Item& Order::_internal_items(int index) const {
  return _impl_.items_.Get(index);
}
inline const ::order_service::v1::Item& Order::items(int index) const {
  // @@protoc_insertion_point(field_get:order_service.v1.Order.items)
  return _internal_items(index);
}
inline ::order_service::v1::Item* Order::_internal_add_items() {
  return _impl_.items_.Add();
}
inline ::order_service::v1::Item* Order::add_items() {
  ::order_service::v1::Item* _add = _internal_add_items();
  // @@protoc_insertion_point(field_add:order_service.v1.Order.items)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::order_service::v1::Item >&
Order::items() const {
  // @@protoc_insertion_point(field_list:order_service.v1.Order.items)
  return _impl_.items_;
}

// .order_service.v1.Status status = 3;
inline void Order::clear_status() {
  _impl_.status_ = 0;
}
inline ::order_service::v1::Status Order::_internal_status() const {
  return static_cast< ::order_service::v1::Status >(_impl_.status_);
}
inline ::order_service::v1::Status Order::status() const {
  // @@protoc_insertion_point(field_get:order_service.v1.Order.status)
  return _internal_status();
}
inline void Order::_internal_set_status(::order_service::v1::Status value) {
  
  _impl_.status_ = value;
}
inline void Order::set_status(::order_service::v1::Status value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:order_service.v1.Order.status)
}

// double total_price = 4;
inline void Order::clear_total_price() {
  _impl_.total_price_ = 0;
}
inline double Order::_internal_total_price() const {
  return _impl_.total_price_;
}
inline double Order::total_price() const {
  // @@protoc_insertion_point(field_get:order_service.v1.Order.total_price)
  return _internal_total_price();
}
inline void Order::_internal_set_total_price(double value) {
  
  _impl_.total_price_ = value;
}
inline void Order::set_total_price(double value) {
  _internal_set_total_price(value);
  // @@protoc_insertion_point(field_set:order_service.v1.Order.total_price)
}

// string address = 5;
inline void Order::clear_address() {
  _impl_.address_.ClearToEmpty();
}
inline const std::string& Order::address() const {
  // @@protoc_insertion_point(field_get:order_service.v1.Order.address)
  return _internal_address();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Order::set_address(ArgT0&& arg0, ArgT... args) {
 
 _impl_.address_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:order_service.v1.Order.address)
}
inline std::string* Order::mutable_address() {
  std::string* _s = _internal_mutable_address();
  // @@protoc_insertion_point(field_mutable:order_service.v1.Order.address)
  return _s;
}
inline const std::string& Order::_internal_address() const {
  return _impl_.address_.Get();
}
inline void Order::_internal_set_address(const std::string& value) {
  
  _impl_.address_.Set(value, GetArenaForAllocation());
}
inline std::string* Order::_internal_mutable_address() {
  
  return _impl_.address_.Mutable(GetArenaForAllocation());
}
inline std::string* Order::release_address() {
  // @@protoc_insertion_point(field_release:order_service.v1.Order.address)
  return _impl_.address_.Release();
}
inline void Order::set_allocated_address(std::string* address) {
  if (address != nullptr) {
    
  } else {
    
  }
  _impl_.address_.SetAllocated(address, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.address_.IsDefault()) {
    _impl_.address_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:order_service.v1.Order.address)
}

// int64 created_at = 6;
inline void Order::clear_created_at() {
  _impl_.created_at_ = int64_t{0};
}
inline int64_t Order::_internal_created_at() const {
  return _impl_.created_at_;
}
inline int64_t Order::created_at() const {
  // @@protoc_insertion_point(field_get:order_service.v1.Order.created_at)
  return _internal_created_at();
}
inline void Order::_internal_set_created_at(int64_t value) {
  
  _impl_.created_at_ = value;
}
inline void Order::set_created_at(int64_t value) {
  _internal_set_created_at(value);
  // @@protoc_insertion_point(field_set:order_service.v1.Order.created_at)
}

// int64 updated_at = 7;
inline void Order::clear_updated_at() {
  _impl_.updated_at_ = int64_t{0};
}
inline int64_t Order::_internal_updated_at() const {
  return _impl_.updated_at_;
}
inline int64_t Order::updated_at() const {
  // @@protoc_insertion_point(field_get:order_service.v1.Order.updated_at)
  return _internal_updated_at();
}
inline void Order::_internal_set_updated_at(int64_t value) {
  
  _impl_.updated_at_ = value;
}
inline void Order::set_updated_at(int64_t value) {
  _internal_set_updated_at(value);
  // @@protoc_insertion_point(field_set:order_service.v1.Order.updated_at)
}

// -------------------------------------------------------------------

// GetRequest

// string order_id = 1;
inline void GetRequest::clear_order_id() {
  _impl_.order_id_.ClearToEmpty();
}
inline const std::string& GetRequest::order_id() const {
  // @@protoc_insertion_point(field_get:order_service.v1.GetRequest.order_id)
  return _internal_order_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GetRequest::set_order_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.order_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:order_service.v1.GetRequest.order_id)
}
inline std::string* GetRequest::mutable_order_id() {
  std::string* _s = _internal_mutable_order_id();
  // @@protoc_insertion_point(field_mutable:order_service.v1.GetRequest.order_id)
  return _s;
}
inline const std::string& GetRequest::_internal_order_id() const {
  return _impl_.order_id_.Get();
}
inline void GetRequest::_internal_set_order_id(const std::string& value) {
  
  _impl_.order_id_.Set(value, GetArenaForAllocation());
}
inline std::string* GetRequest::_internal_mutable_order_id() {
  
  return _impl_.order_id_.Mutable(GetArenaForAllocation());
}
inline std::string* GetRequest::release_order_id() {
  // @@protoc_insertion_point(field_release:order_service.v1.GetRequest.order_id)
  return _impl_.order_id_.Release();
}
inline void GetRequest::set_allocated_order_id(std::string* order_id) {
  if (order_id != nullptr) {
    
  } else {
    
  }
  _impl_.order_id_.SetAllocated(order_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.order_id_.IsDefault()) {
    _impl_.order_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:order_service.v1.GetRequest.order_id)
}

// -------------------------------------------------------------------

// GetResponse

// .order_service.v1.Order order = 1;
inline bool GetResponse::_internal_has_order() const {
  return this != internal_default_instance() && _impl_.order_ != nullptr;
}
inline bool GetResponse::has_order() const {
  return _internal_has_order();
}
inline void GetResponse::clear_order() {
  if (GetArenaForAllocation() == nullptr && _impl_.order_ != nullptr) {
    delete _impl_.order_;
  }
  _impl_.order_ = nullptr;
}
inline const ::order_service::v1::Order& GetResponse::_internal_order() const {
  const ::order_service::v1::Order* p = _impl_.order_;
  return p != nullptr ? *p : reinterpret_cast<const ::order_service::v1::Order&>(
      ::order_service::v1::_Order_default_instance_);
}
inline const ::order_service::v1::Order& GetResponse::order() const {
  // @@protoc_insertion_point(field_get:order_service.v1.GetResponse.order)
  return _internal_order();
}
inline void GetResponse::unsafe_arena_set_allocated_order(
    ::order_service::v1::Order* order) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.order_);
  }
  _impl_.order_ = order;
  if (order) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:order_service.v1.GetResponse.order)
}
inline ::order_service::v1::Order* GetResponse::release_order() {
  
  ::order_service::v1::Order* temp = _impl_.order_;
  _impl_.order_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::order_service::v1::Order* GetResponse::unsafe_arena_release_order() {
  // @@protoc_insertion_point(field_release:order_service.v1.GetResponse.order)
  
  ::order_service::v1::Order* temp = _impl_.order_;
  _impl_.order_ = nullptr;
  return temp;
}
inline ::order_service::v1::Order* GetResponse::_internal_mutable_order() {
  
  if (_impl_.order_ == nullptr) {
    auto* p = CreateMaybeMessage<::order_service::v1::Order>(GetArenaForAllocation());
    _impl_.order_ = p;
  }
  return _impl_.order_;
}
inline ::order_service::v1::Order* GetResponse::mutable_order() {
  ::order_service::v1::Order* _msg = _internal_mutable_order();
  // @@protoc_insertion_point(field_mutable:order_service.v1.GetResponse.order)
  return _msg;
}
inline void GetResponse::set_allocated_order(::order_service::v1::Order* order) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.order_;
  }
  if (order) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(order);
    if (message_arena != submessage_arena) {
      order = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, order, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.order_ = order;
  // @@protoc_insertion_point(field_set_allocated:order_service.v1.GetResponse.order)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// ListRequest

// string user_id = 1;
inline void ListRequest::clear_user_id() {
  _impl_.user_id_.ClearToEmpty();
}
inline const std::string& ListRequest::user_id() const {
  // @@protoc_insertion_point(field_get:order_service.v1.ListRequest.user_id)
  return _internal_user_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ListRequest::set_user_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.user_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:order_service.v1.ListRequest.user_id)
}
inline std::string* ListRequest::mutable_user_id() {
  std::string* _s = _internal_mutable_user_id();
  // @@protoc_insertion_point(field_mutable:order_service.v1.ListRequest.user_id)
  return _s;
}
inline const std::string& ListRequest::_internal_user_id() const {
  return _impl_.user_id_.Get();
}
inline void ListRequest::_internal_set_user_id(const std::string& value) {
  
  _impl_.user_id_.Set(value, GetArenaForAllocation());
}
inline std::string* ListRequest::_internal_mutable_user_id() {
  
  return _impl_.user_id_.Mutable(GetArenaForAllocation());
}
inline std::string* ListRequest::release_user_id() {
  // @@protoc_insertion_point(field_release:order_service.v1.ListRequest.user_id)
  return _impl_.user_id_.Release();
}
inline void ListRequest::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    
  } else {
    
  }
  _impl_.user_id_.SetAllocated(user_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.user_id_.IsDefault()) {
    _impl_.user_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:order_service.v1.ListRequest.user_id)
}

// int32 limit = 2;
inline void ListRequest::clear_limit() {
  _impl_.limit_ = 0;
}
inline int32_t ListRequest::_internal_limit() const {
  return _impl_.limit_;
}
inline int32_t ListRequest::limit() const {
  // @@protoc_insertion_point(field_get:order_service.v1.ListRequest.limit)
  return _internal_limit();
}
inline void ListRequest::_internal_set_limit(int32_t value) {
  
  _impl_.limit_ = value;
}
inline void ListRequest::set_limit(int32_t value) {
  _internal_set_limit(value);
  // @@protoc_insertion_point(field_set:order_service.v1.ListRequest.limit)
}

// int32 page = 3;
inline void ListRequest::clear_page() {
  _impl_.page_ = 0;
}
inline int32_t ListRequest::_internal_page() const {
  return _impl_.page_;
}
inline int32_t ListRequest::page() const {
  // @@protoc_insertion_point(field_get:order_service.v1.ListRequest.page)
  return _internal_page();
}
inline void ListRequest::_internal_set_page(int32_t value) {
  
  _impl_.page_ = value;
}
inline void ListRequest::set_page(int32_t value) {
  _internal_set_page(value);
  // @@protoc_insertion_point(field_set:order_service.v1.ListRequest.page)
}

// map<string, string> filter = 4;
inline int ListRequest::_internal_filter_size() const {
  return _impl_.filter_.size();
}
inline int ListRequest::filter_size() const {
  return _internal_filter_size();
}
inline void ListRequest::clear_filter() {
  _impl_.filter_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
ListRequest::_internal_filter() const {
  return _impl_.filter_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >&
ListRequest::filter() const {
  // @@protoc_insertion_point(field_map:order_service.v1.ListRequest.filter)
  return _internal_filter();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
ListRequest::_internal_mutable_filter() {
  return _impl_.filter_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, std::string >*
ListRequest::mutable_filter() {
  // @@protoc_insertion_point(field_mutable_map:order_service.v1.ListRequest.filter)
  return _internal_mutable_filter();
}

// -------------------------------------------------------------------

// ListResponse

// repeated .order_service.v1.Order orders = 1;
inline int ListResponse::_internal_orders_size() const {
  return _impl_.orders_.size();
}
inline int ListResponse::orders_size() const {
  return _internal_orders_size();
}
inline void ListResponse::clear_orders() {
  _impl_.orders_.Clear();
}
inline ::order_service::v1::Order* ListResponse::mutable_orders(int index) {
  // @@protoc_insertion_point(field_mutable:order_service.v1.ListResponse.orders)
  return _impl_.orders_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::order_service::v1::Order >*
ListResponse::mutable_orders() {
  // @@protoc_insertion_point(field_mutable_list:order_service.v1.ListResponse.orders)
  return &_impl_.orders_;
}
inline const ::order_service::v1::Order& ListResponse::_internal_orders(int index) const {
  return _impl_.orders_.Get(index);
}
inline const ::order_service::v1::Order& ListResponse::orders(int index) const {
  // @@protoc_insertion_point(field_get:order_service.v1.ListResponse.orders)
  return _internal_orders(index);
}
inline ::order_service::v1::Order* ListResponse::_internal_add_orders() {
  return _impl_.orders_.Add();
}
inline ::order_service::v1::Order* ListResponse::add_orders() {
  ::order_service::v1::Order* _add = _internal_add_orders();
  // @@protoc_insertion_point(field_add:order_service.v1.ListResponse.orders)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::order_service::v1::Order >&
ListResponse::orders() const {
  // @@protoc_insertion_point(field_list:order_service.v1.ListResponse.orders)
  return _impl_.orders_;
}

// int32 total = 2;
inline void ListResponse::clear_total() {
  _impl_.total_ = 0;
}
inline int32_t ListResponse::_internal_total() const {
  return _impl_.total_;
}
inline int32_t ListResponse::total() const {
  // @@protoc_insertion_point(field_get:order_service.v1.ListResponse.total)
  return _internal_total();
}
inline void ListResponse::_internal_set_total(int32_t value) {
  
  _impl_.total_ = value;
}
inline void ListResponse::set_total(int32_t value) {
  _internal_set_total(value);
  // @@protoc_insertion_point(field_set:order_service.v1.ListResponse.total)
}

// -------------------------------------------------------------------

// CreateRequest

// string user_id = 1;
inline void CreateRequest::clear_user_id() {
  _impl_.user_id_.ClearToEmpty();
}
inline const std::string& CreateRequest::user_id() const {
  // @@protoc_insertion_point(field_get:order_service.v1.CreateRequest.user_id)
  return _internal_user_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateRequest::set_user_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.user_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:order_service.v1.CreateRequest.user_id)
}
inline std::string* CreateRequest::mutable_user_id() {
  std::string* _s = _internal_mutable_user_id();
  // @@protoc_insertion_point(field_mutable:order_service.v1.CreateRequest.user_id)
  return _s;
}
inline const std::string& CreateRequest::_internal_user_id() const {
  return _impl_.user_id_.Get();
}
inline void CreateRequest::_internal_set_user_id(const std::string& value) {
  
  _impl_.user_id_.Set(value, GetArenaForAllocation());
}
inline std::string* CreateRequest::_internal_mutable_user_id() {
  
  return _impl_.user_id_.Mutable(GetArenaForAllocation());
}
inline std::string* CreateRequest::release_user_id() {
  // @@protoc_insertion_point(field_release:order_service.v1.CreateRequest.user_id)
  return _impl_.user_id_.Release();
}
inline void CreateRequest::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    
  } else {
    
  }
  _impl_.user_id_.SetAllocated(user_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.user_id_.IsDefault()) {
    _impl_.user_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:order_service.v1.CreateRequest.user_id)
}

// string address = 2;
inline void CreateRequest::clear_address() {
  _impl_.address_.ClearToEmpty();
}
inline const std::string& CreateRequest::address() const {
  // @@protoc_insertion_point(field_get:order_service.v1.CreateRequest.address)
  return _internal_address();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateRequest::set_address(ArgT0&& arg0, ArgT... args) {
 
 _impl_.address_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:order_service.v1.CreateRequest.address)
}
inline std::string* CreateRequest::mutable_address() {
  std::string* _s = _internal_mutable_address();
  // @@protoc_insertion_point(field_mutable:order_service.v1.CreateRequest.address)
  return _s;
}
inline const std::string& CreateRequest::_internal_address() const {
  return _impl_.address_.Get();
}
inline void CreateRequest::_internal_set_address(const std::string& value) {
  
  _impl_.address_.Set(value, GetArenaForAllocation());
}
inline std::string* CreateRequest::_internal_mutable_address() {
  
  return _impl_.address_.Mutable(GetArenaForAllocation());
}
inline std::string* CreateRequest::release_address() {
  // @@protoc_insertion_point(field_release:order_service.v1.CreateRequest.address)
  return _impl_.address_.Release();
}
inline void CreateRequest::set_allocated_address(std::string* address) {
  if (address != nullptr) {
    
  } else {
    
  }
  _impl_.address_.SetAllocated(address, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.address_.IsDefault()) {
    _impl_.address_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:order_service.v1.CreateRequest.address)
}

// repeated .order_service.v1.Item items = 3;
inline int CreateRequest::_internal_items_size() const {
  return _impl_.items_.size();
}
inline int CreateRequest::items_size() const {
  return _internal_items_size();
}
inline void CreateRequest::clear_items() {
  _impl_.items_.Clear();
}
inline ::order_service::v1::Item* CreateRequest::mutable_items(int index) {
  // @@protoc_insertion_point(field_mutable:order_service.v1.CreateRequest.items)
  return _impl_.items_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::order_service::v1::Item >*
CreateRequest::mutable_items() {
  // @@protoc_insertion_point(field_mutable_list:order_service.v1.CreateRequest.items)
  return &_impl_.items_;
}
inline const ::order_service::v1::Item& CreateRequest::_internal_items(int index) const {
  return _impl_.items_.Get(index);
}
inline const ::order_service::v1::Item& CreateRequest::items(int index) const {
  // @@protoc_insertion_point(field_get:order_service.v1.CreateRequest.items)
  return _internal_items(index);
}
inline ::order_service::v1::Item* CreateRequest::_internal_add_items() {
  return _impl_.items_.Add();
}
inline ::order_service::v1::Item* CreateRequest::add_items() {
  ::order_service::v1::Item* _add = _internal_add_items();
  // @@protoc_insertion_point(field_add:order_service.v1.CreateRequest.items)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::order_service::v1::Item >&
CreateRequest::items() const {
  // @@protoc_insertion_point(field_list:order_service.v1.CreateRequest.items)
  return _impl_.items_;
}

// -------------------------------------------------------------------

// CreateResponse

// string user_id = 1;
inline void CreateResponse::clear_user_id() {
  _impl_.user_id_.ClearToEmpty();
}
inline const std::string& CreateResponse::user_id() const {
  // @@protoc_insertion_point(field_get:order_service.v1.CreateResponse.user_id)
  return _internal_user_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CreateResponse::set_user_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.user_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:order_service.v1.CreateResponse.user_id)
}
inline std::string* CreateResponse::mutable_user_id() {
  std::string* _s = _internal_mutable_user_id();
  // @@protoc_insertion_point(field_mutable:order_service.v1.CreateResponse.user_id)
  return _s;
}
inline const std::string& CreateResponse::_internal_user_id() const {
  return _impl_.user_id_.Get();
}
inline void CreateResponse::_internal_set_user_id(const std::string& value) {
  
  _impl_.user_id_.Set(value, GetArenaForAllocation());
}
inline std::string* CreateResponse::_internal_mutable_user_id() {
  
  return _impl_.user_id_.Mutable(GetArenaForAllocation());
}
inline std::string* CreateResponse::release_user_id() {
  // @@protoc_insertion_point(field_release:order_service.v1.CreateResponse.user_id)
  return _impl_.user_id_.Release();
}
inline void CreateResponse::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    
  } else {
    
  }
  _impl_.user_id_.SetAllocated(user_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.user_id_.IsDefault()) {
    _impl_.user_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:order_service.v1.CreateResponse.user_id)
}

// .order_service.v1.Order order = 2;
inline bool CreateResponse::_internal_has_order() const {
  return this != internal_default_instance() && _impl_.order_ != nullptr;
}
inline bool CreateResponse::has_order() const {
  return _internal_has_order();
}
inline void CreateResponse::clear_order() {
  if (GetArenaForAllocation() == nullptr && _impl_.order_ != nullptr) {
    delete _impl_.order_;
  }
  _impl_.order_ = nullptr;
}
inline const ::order_service::v1::Order& CreateResponse::_internal_order() const {
  const ::order_service::v1::Order* p = _impl_.order_;
  return p != nullptr ? *p : reinterpret_cast<const ::order_service::v1::Order&>(
      ::order_service::v1::_Order_default_instance_);
}
inline const ::order_service::v1::Order& CreateResponse::order() const {
  // @@protoc_insertion_point(field_get:order_service.v1.CreateResponse.order)
  return _internal_order();
}
inline void CreateResponse::unsafe_arena_set_allocated_order(
    ::order_service::v1::Order* order) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.order_);
  }
  _impl_.order_ = order;
  if (order) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:order_service.v1.CreateResponse.order)
}
inline ::order_service::v1::Order* CreateResponse::release_order() {
  
  ::order_service::v1::Order* temp = _impl_.order_;
  _impl_.order_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::order_service::v1::Order* CreateResponse::unsafe_arena_release_order() {
  // @@protoc_insertion_point(field_release:order_service.v1.CreateResponse.order)
  
  ::order_service::v1::Order* temp = _impl_.order_;
  _impl_.order_ = nullptr;
  return temp;
}
inline ::order_service::v1::Order* CreateResponse::_internal_mutable_order() {
  
  if (_impl_.order_ == nullptr) {
    auto* p = CreateMaybeMessage<::order_service::v1::Order>(GetArenaForAllocation());
    _impl_.order_ = p;
  }
  return _impl_.order_;
}
inline ::order_service::v1::Order* CreateResponse::mutable_order() {
  ::order_service::v1::Order* _msg = _internal_mutable_order();
  // @@protoc_insertion_point(field_mutable:order_service.v1.CreateResponse.order)
  return _msg;
}
inline void CreateResponse::set_allocated_order(::order_service::v1::Order* order) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.order_;
  }
  if (order) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(order);
    if (message_arena != submessage_arena) {
      order = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, order, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.order_ = order;
  // @@protoc_insertion_point(field_set_allocated:order_service.v1.CreateResponse.order)
}

// -------------------------------------------------------------------

// UpdateRequest

// .order_service.v1.Order order = 2;
inline bool UpdateRequest::_internal_has_order() const {
  return this != internal_default_instance() && _impl_.order_ != nullptr;
}
inline bool UpdateRequest::has_order() const {
  return _internal_has_order();
}
inline void UpdateRequest::clear_order() {
  if (GetArenaForAllocation() == nullptr && _impl_.order_ != nullptr) {
    delete _impl_.order_;
  }
  _impl_.order_ = nullptr;
}
inline const ::order_service::v1::Order& UpdateRequest::_internal_order() const {
  const ::order_service::v1::Order* p = _impl_.order_;
  return p != nullptr ? *p : reinterpret_cast<const ::order_service::v1::Order&>(
      ::order_service::v1::_Order_default_instance_);
}
inline const ::order_service::v1::Order& UpdateRequest::order() const {
  // @@protoc_insertion_point(field_get:order_service.v1.UpdateRequest.order)
  return _internal_order();
}
inline void UpdateRequest::unsafe_arena_set_allocated_order(
    ::order_service::v1::Order* order) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.order_);
  }
  _impl_.order_ = order;
  if (order) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:order_service.v1.UpdateRequest.order)
}
inline ::order_service::v1::Order* UpdateRequest::release_order() {
  
  ::order_service::v1::Order* temp = _impl_.order_;
  _impl_.order_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::order_service::v1::Order* UpdateRequest::unsafe_arena_release_order() {
  // @@protoc_insertion_point(field_release:order_service.v1.UpdateRequest.order)
  
  ::order_service::v1::Order* temp = _impl_.order_;
  _impl_.order_ = nullptr;
  return temp;
}
inline ::order_service::v1::Order* UpdateRequest::_internal_mutable_order() {
  
  if (_impl_.order_ == nullptr) {
    auto* p = CreateMaybeMessage<::order_service::v1::Order>(GetArenaForAllocation());
    _impl_.order_ = p;
  }
  return _impl_.order_;
}
inline ::order_service::v1::Order* UpdateRequest::mutable_order() {
  ::order_service::v1::Order* _msg = _internal_mutable_order();
  // @@protoc_insertion_point(field_mutable:order_service.v1.UpdateRequest.order)
  return _msg;
}
inline void UpdateRequest::set_allocated_order(::order_service::v1::Order* order) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.order_;
  }
  if (order) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(order);
    if (message_arena != submessage_arena) {
      order = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, order, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.order_ = order;
  // @@protoc_insertion_point(field_set_allocated:order_service.v1.UpdateRequest.order)
}

// -------------------------------------------------------------------

// UpdateResponse

// .order_service.v1.Order order = 2;
inline bool UpdateResponse::_internal_has_order() const {
  return this != internal_default_instance() && _impl_.order_ != nullptr;
}
inline bool UpdateResponse::has_order() const {
  return _internal_has_order();
}
inline void UpdateResponse::clear_order() {
  if (GetArenaForAllocation() == nullptr && _impl_.order_ != nullptr) {
    delete _impl_.order_;
  }
  _impl_.order_ = nullptr;
}
inline const ::order_service::v1::Order& UpdateResponse::_internal_order() const {
  const ::order_service::v1::Order* p = _impl_.order_;
  return p != nullptr ? *p : reinterpret_cast<const ::order_service::v1::Order&>(
      ::order_service::v1::_Order_default_instance_);
}
inline const ::order_service::v1::Order& UpdateResponse::order() const {
  // @@protoc_insertion_point(field_get:order_service.v1.UpdateResponse.order)
  return _internal_order();
}
inline void UpdateResponse::unsafe_arena_set_allocated_order(
    ::order_service::v1::Order* order) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.order_);
  }
  _impl_.order_ = order;
  if (order) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:order_service.v1.UpdateResponse.order)
}
inline ::order_service::v1::Order* UpdateResponse::release_order() {
  
  ::order_service::v1::Order* temp = _impl_.order_;
  _impl_.order_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::order_service::v1::Order* UpdateResponse::unsafe_arena_release_order() {
  // @@protoc_insertion_point(field_release:order_service.v1.UpdateResponse.order)
  
  ::order_service::v1::Order* temp = _impl_.order_;
  _impl_.order_ = nullptr;
  return temp;
}
inline ::order_service::v1::Order* UpdateResponse::_internal_mutable_order() {
  
  if (_impl_.order_ == nullptr) {
    auto* p = CreateMaybeMessage<::order_service::v1::Order>(GetArenaForAllocation());
    _impl_.order_ = p;
  }
  return _impl_.order_;
}
inline ::order_service::v1::Order* UpdateResponse::mutable_order() {
  ::order_service::v1::Order* _msg = _internal_mutable_order();
  // @@protoc_insertion_point(field_mutable:order_service.v1.UpdateResponse.order)
  return _msg;
}
inline void UpdateResponse::set_allocated_order(::order_service::v1::Order* order) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.order_;
  }
  if (order) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(order);
    if (message_arena != submessage_arena) {
      order = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, order, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.order_ = order;
  // @@protoc_insertion_point(field_set_allocated:order_service.v1.UpdateResponse.order)
}

// -------------------------------------------------------------------

// StreamOrderUpdateRequest

// string user_id = 1;
inline void StreamOrderUpdateRequest::clear_user_id() {
  _impl_.user_id_.ClearToEmpty();
}
inline const std::string& StreamOrderUpdateRequest::user_id() const {
  // @@protoc_insertion_point(field_get:order_service.v1.StreamOrderUpdateRequest.user_id)
  return _internal_user_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StreamOrderUpdateRequest::set_user_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.user_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:order_service.v1.StreamOrderUpdateRequest.user_id)
}
inline std::string* StreamOrderUpdateRequest::mutable_user_id() {
  std::string* _s = _internal_mutable_user_id();
  // @@protoc_insertion_point(field_mutable:order_service.v1.StreamOrderUpdateRequest.user_id)
  return _s;
}
inline const std::string& StreamOrderUpdateRequest::_internal_user_id() const {
  return _impl_.user_id_.Get();
}
inline void StreamOrderUpdateRequest::_internal_set_user_id(const std::string& value) {
  
  _impl_.user_id_.Set(value, GetArenaForAllocation());
}
inline std::string* StreamOrderUpdateRequest::_internal_mutable_user_id() {
  
  return _impl_.user_id_.Mutable(GetArenaForAllocation());
}
inline std::string* StreamOrderUpdateRequest::release_user_id() {
  // @@protoc_insertion_point(field_release:order_service.v1.StreamOrderUpdateRequest.user_id)
  return _impl_.user_id_.Release();
}
inline void StreamOrderUpdateRequest::set_allocated_user_id(std::string* user_id) {
  if (user_id != nullptr) {
    
  } else {
    
  }
  _impl_.user_id_.SetAllocated(user_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.user_id_.IsDefault()) {
    _impl_.user_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:order_service.v1.StreamOrderUpdateRequest.user_id)
}

// string order_id = 2;
inline void StreamOrderUpdateRequest::clear_order_id() {
  _impl_.order_id_.ClearToEmpty();
}
inline const std::string& StreamOrderUpdateRequest::order_id() const {
  // @@protoc_insertion_point(field_get:order_service.v1.StreamOrderUpdateRequest.order_id)
  return _internal_order_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void StreamOrderUpdateRequest::set_order_id(ArgT0&& arg0, ArgT... args) {
 
 _impl_.order_id_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:order_service.v1.StreamOrderUpdateRequest.order_id)
}
inline std::string* StreamOrderUpdateRequest::mutable_order_id() {
  std::string* _s = _internal_mutable_order_id();
  // @@protoc_insertion_point(field_mutable:order_service.v1.StreamOrderUpdateRequest.order_id)
  return _s;
}
inline const std::string& StreamOrderUpdateRequest::_internal_order_id() const {
  return _impl_.order_id_.Get();
}
inline void StreamOrderUpdateRequest::_internal_set_order_id(const std::string& value) {
  
  _impl_.order_id_.Set(value, GetArenaForAllocation());
}
inline std::string* StreamOrderUpdateRequest::_internal_mutable_order_id() {
  
  return _impl_.order_id_.Mutable(GetArenaForAllocation());
}
inline std::string* StreamOrderUpdateRequest::release_order_id() {
  // @@protoc_insertion_point(field_release:order_service.v1.StreamOrderUpdateRequest.order_id)
  return _impl_.order_id_.Release();
}
inline void StreamOrderUpdateRequest::set_allocated_order_id(std::string* order_id) {
  if (order_id != nullptr) {
    
  } else {
    
  }
  _impl_.order_id_.SetAllocated(order_id, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.order_id_.IsDefault()) {
    _impl_.order_id_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:order_service.v1.StreamOrderUpdateRequest.order_id)
}

// -------------------------------------------------------------------

// StreamOrderUpdateResponse

// .order_service.v1.Order order = 1;
inline bool StreamOrderUpdateResponse::_internal_has_order() const {
  return this != internal_default_instance() && _impl_.order_ != nullptr;
}
inline bool StreamOrderUpdateResponse::has_order() const {
  return _internal_has_order();
}
inline void StreamOrderUpdateResponse::clear_order() {
  if (GetArenaForAllocation() == nullptr && _impl_.order_ != nullptr) {
    delete _impl_.order_;
  }
  _impl_.order_ = nullptr;
}
inline const ::order_service::v1::Order& StreamOrderUpdateResponse::_internal_order() const {
  const ::order_service::v1::Order* p = _impl_.order_;
  return p != nullptr ? *p : reinterpret_cast<const ::order_service::v1::Order&>(
      ::order_service::v1::_Order_default_instance_);
}
inline const ::order_service::v1::Order& StreamOrderUpdateResponse::order() const {
  // @@protoc_insertion_point(field_get:order_service.v1.StreamOrderUpdateResponse.order)
  return _internal_order();
}
inline void StreamOrderUpdateResponse::unsafe_arena_set_allocated_order(
    ::order_service::v1::Order* order) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.order_);
  }
  _impl_.order_ = order;
  if (order) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:order_service.v1.StreamOrderUpdateResponse.order)
}
inline ::order_service::v1::Order* StreamOrderUpdateResponse::release_order() {
  
  ::order_service::v1::Order* temp = _impl_.order_;
  _impl_.order_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::order_service::v1::Order* StreamOrderUpdateResponse::unsafe_arena_release_order() {
  // @@protoc_insertion_point(field_release:order_service.v1.StreamOrderUpdateResponse.order)
  
  ::order_service::v1::Order* temp = _impl_.order_;
  _impl_.order_ = nullptr;
  return temp;
}
inline ::order_service::v1::Order* StreamOrderUpdateResponse::_internal_mutable_order() {
  
  if (_impl_.order_ == nullptr) {
    auto* p = CreateMaybeMessage<::order_service::v1::Order>(GetArenaForAllocation());
    _impl_.order_ = p;
  }
  return _impl_.order_;
}
inline ::order_service::v1::Order* StreamOrderUpdateResponse::mutable_order() {
  ::order_service::v1::Order* _msg = _internal_mutable_order();
  // @@protoc_insertion_point(field_mutable:order_service.v1.StreamOrderUpdateResponse.order)
  return _msg;
}
inline void StreamOrderUpdateResponse::set_allocated_order(::order_service::v1::Order* order) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.order_;
  }
  if (order) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(order);
    if (message_arena != submessage_arena) {
      order = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, order, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.order_ = order;
  // @@protoc_insertion_point(field_set_allocated:order_service.v1.StreamOrderUpdateResponse.order)
}

// .order_service.v1.UpdateType type = 2;
inline void StreamOrderUpdateResponse::clear_type() {
  _impl_.type_ = 0;
}
inline ::order_service::v1::UpdateType StreamOrderUpdateResponse::_internal_type() const {
  return static_cast< ::order_service::v1::UpdateType >(_impl_.type_);
}
inline ::order_service::v1::UpdateType StreamOrderUpdateResponse::type() const {
  // @@protoc_insertion_point(field_get:order_service.v1.StreamOrderUpdateResponse.type)
  return _internal_type();
}
inline void StreamOrderUpdateResponse::_internal_set_type(::order_service::v1::UpdateType value) {
  
  _impl_.type_ = value;
}
inline void StreamOrderUpdateResponse::set_type(::order_service::v1::UpdateType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:order_service.v1.StreamOrderUpdateResponse.type)
}

// int64 updated_at = 3;
inline void StreamOrderUpdateResponse::clear_updated_at() {
  _impl_.updated_at_ = int64_t{0};
}
inline int64_t StreamOrderUpdateResponse::_internal_updated_at() const {
  return _impl_.updated_at_;
}
inline int64_t StreamOrderUpdateResponse::updated_at() const {
  // @@protoc_insertion_point(field_get:order_service.v1.StreamOrderUpdateResponse.updated_at)
  return _internal_updated_at();
}
inline void StreamOrderUpdateResponse::_internal_set_updated_at(int64_t value) {
  
  _impl_.updated_at_ = value;
}
inline void StreamOrderUpdateResponse::set_updated_at(int64_t value) {
  _internal_set_updated_at(value);
  // @@protoc_insertion_point(field_set:order_service.v1.StreamOrderUpdateResponse.updated_at)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace order_service

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::order_service::v1::Status> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::order_service::v1::Status>() {
  return ::order_service::v1::Status_descriptor();
}
template <> struct is_proto_enum< ::order_service::v1::UpdateType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::order_service::v1::UpdateType>() {
  return ::order_service::v1::UpdateType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_order_5fservice_2forder_2eproto
